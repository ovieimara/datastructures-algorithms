def gridSearch(G, P):
    # Write your code here
    r = len(G)
    c = len(G[0])

    for i in range(r):
        if grid(i, c):
            return 'YES'

    return 'NO'


def grid(r, c):
    x = len(P[0])
    for i in range(0, c - x + 1):
        if P[0] == G[r][i: i + x]:
            if search(G, P, r, i):
                return True

    return False


def search(G, P, r, i):
    grid_idx = r + 1
    patt_idx = 1

    while grid_idx < len(G) and patt_idx < len(P):
        if G[grid_idx][i: i + len(P[0])] != P[patt_idx]:
            return False

        grid_idx += 1
        patt_idx += 1

    return True



# def gridSearch(G, P):
#     r = len(G)
#     c = len(G[0])
#     cache = []
#     # if len(P) == len(G):
#     #     return 'YES'
#     #
#     # if len(P) <= 0 or r <= 0:
#     #     return 'NO'
#
#     for i in range(0, c):
#         for j in range(0, r):
#             idx = find_index(G[i], P[0], j)
#             # print(idx)
#             if idx > -1:
#                 # cache.append(idx)
#                 is_found = search(G, P, i, 0, idx)
#                 if is_found:
#                     return 'YES'
#
#     return 'NO'
#
#
# def search(G, P, i, j, index):
#     grid_idx = i + 1
#     patt_idx = j + 1
#
#     # if grid_idx >= len(G):
#     #     return False
#     # if patt_idx >= len(P):
#     #     return False
#
#     while grid_idx < len(G) and patt_idx < len(P):
#         idx = find_index(G[grid_idx], P[patt_idx], index)
#         print(idx, G[grid_idx], P[patt_idx])
#         # if idx == -1 or cache and idx != cache[-1]:
#         if idx != index:
#             return False
#         # if not cache:
#         # cache.append(idx)
#
#         grid_idx += 1
#         patt_idx += 1
#
#     # print("cache: ", cache)
#     return True

# def get_lps(string):
#     lps_arr = [0] * len(string)
#     length = 0
#     i = 1
#
#     while i < len(string):
#         if string[length] == string[i]:
#             length += 1
#             lps_arr[i] = length
#             i += 1
#
#         elif length > 0:
#            length = lps_arr[length - 1]
#
#         else:
#             i += 1
#
#     return lps_arr
#
# def find_index(a, b, idx: int):
#     n = len(a)
#     m = len(b)
#     i = idx
#     j = 0
#     # print(m, n)
#     # if n == 0 or m == 0:
#     #     return -1
#
#     lps = get_lps(b)
#     while i < n and j < m:
#         if a[i] == b[j]:
#             i += 1
#             j += 1
#
#         elif j > 0:
#             j = lps[j - 1]
#
#         else:
#             i += 1
#
#     # print(i, j)
#     return i - j if j == m else -1




G = [
    "7283455864",
    "6731158619",
    "8988242643",
    "3830589324",
    "2229505813",
    "5633845374",
    "6473530293",
    "7053106601",
    "0834282956",
    "4607924137"
    ]

P = ["9505", "3845", "3530"]

# G = [
#     "400453592126560",
#     "114213133098692",
#     "474386082879648",
#     "522356951189169",
#     "887109450487496",
#     "252802633388782",
#     "502771484966748",
#     "075975207693780",
#     "511799789562806",
#     "404007454272504",
#     "549043809916080",
#     "962410809534811",
#     "445893523733475",
#     "768705303214174",
#     "650629270887160"
# ]

# P = ["99", "99"]
# G = []
# P = []

# G = [
#     "7283455864",
#     "6731158619",
#     "8988242643",
#     "3830589324",
#     "2229505813",
#     "563    374",
#     "6473530293",
#     "7053106601",
#     "0834282956",
#     "4607924137"
#     ]
#
# P = ["9505", "    ", "3530"]

# G = [
#     "7283455864",
#     "6731158619",
#     "8988242643",
#     "3830589324",
#     "2229505813",
#     "          ",
#     "6473530293",
#     "7053106601",
#     "0834282956",
#     "4607924137"
#     ]
#
# P = ["9505", "3845", "3530"]
#
# G = [
#     "7283455864",
#     "6731158619",
#     "8988242643",
#     "3830589324",
#     "2229505813",
#     "   3845   ",
#     "6473530293",
#     "7053106601",
#     "0834282956",
#     "4607924137"
#     ]
#
# P = ["9505", "3845", "3530"]
#
# G = [
#     "7283455864",
#     "6731158619",
#     "8988242643",
#     "3830589324",
#     "2229505813",
#     "   3845374",
#     "6473530293",
#     "7053106601",
#     "0834282956",
#     "4607924137"
#     ]
#
# P = ["9505", "3845", "3530"]
#
# G = [
#     "7283455864",
#     "6731158619",
#     "8988242643",
#     "3830589324",
#     "2229505813",
#     "5633845   ",
#     "6473530293",
#     "7053106601",
#     "0834282956",
#     "4607924137"
#     ]
#
# P = ["9505", "3845", "3530"]
#
# G = [
#     "7283455864",
#     "6731158619",
#     "8988242643",
#     "3830589324",
#     "2229505813",
#     "          ",
#     "6473530293",
#     "7053106601",
#     "0834282956",
#     "4607924137"
#     ]
#
# P = ["9505", "    ", "3530"]
#
# G = [
#     "7283455864",
#     "6731158619",
#     "8988242643",
#     "3830589324",
#     "2229505813",
#     "          ",
#     "          ",
#     "7053106601",
#     "0834282956",
#     "4607924137"
#     ]
#
# P = ["", "", ""]
#
# G = [
#     "7283455864",
#     "6731158619",
#     "8988242643",
#     "3830589324",
#     "2229505813",
#     "5633845374",
#     "6473530293",
#     "7053106601",
#     "0834282956",
#     "4607924137"
#     ]
#
# P = ["9505", "", ""]

# G = ["123456",
#     "567890",
#     "234567",
#     "194729"]
# P = [
#     "1234",
#     "5678",
#     "2345",
#     "4729"
#     ]


# G = [
#     "1234",
#     "4321",
#     "9999",
#     "9999"
#     ]
#
# P = ["12", "21"]

G = [
    "111111111111111",
    "111111111111111",
    "111111111111111",
    "111111011111111",
    "111111111111111",
    "111111111111111",
    "101010101010101",
    ]

P = [
    "11111",
    "11111",
    "11111",
    "11110",
    ]

print(gridSearch(G, P))
# a = "2229505813"
# b = "9505"
# print(find_index(a, b))


